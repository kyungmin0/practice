
Line Tracer code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000005d8  0000066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800110  00800110  0000067c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099e  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081e  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000329  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044f  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000270  00000000  00000000  00002143  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000023b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	73 c0       	rjmp	.+230    	; 0xf0 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6b c0       	rjmp	.+214    	; 0x118 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 33       	cpi	r26, 0x32	; 50
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2d d1       	rcall	.+602    	; 0x31e <main>
  c4:	87 c2       	rjmp	.+1294   	; 0x5d4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:
int error, sensorRef, sensorData;

void Timer_Init(void);

ISR(INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	size = 1;		// 최대, 최소 받기
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <size+0x1>
  de:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <size>
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_2>:

ISR(INT1_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
	mode = 1;			// 주행 시작
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 106:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	0b b6       	in	r0, 0x3b	; 59
 124:	0f 92       	push	r0
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	1f 93       	push	r17
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	60 97       	sbiw	r28, 0x10	; 16
 152:	de bf       	out	0x3e, r29	; 62
 154:	cd bf       	out	0x3d, r28	; 61
	ADMUX = 0x40;
 156:	80 e4       	ldi	r24, 0x40	; 64
 158:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87;
 15a:	87 e8       	ldi	r24, 0x87	; 135
 15c:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADSC);
 15e:	86 b1       	in	r24, 0x06	; 6
 160:	80 64       	ori	r24, 0x40	; 64
 162:	86 b9       	out	0x06, r24	; 6
	
	while(!(ADCSRA & (1<<ADIF)));
 164:	34 9b       	sbis	0x06, 4	; 6
 166:	fe cf       	rjmp	.-4      	; 0x164 <__vector_16+0x4c>
	ADC = adc[8];
 168:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <max>
 16c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <max+0x1>
 170:	95 b9       	out	0x05, r25	; 5
 172:	84 b9       	out	0x04, r24	; 4
	
	if(size == 1)		// 최대, 최소 받기
 174:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <size>
 178:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <size+0x1>
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	09 f0       	breq	.+2      	; 0x182 <__vector_16+0x6a>
 180:	43 c0       	rjmp	.+134    	; 0x208 <__vector_16+0xf0>
 182:	1c c0       	rjmp	.+56     	; 0x1bc <__vector_16+0xa4>
	{
		for(int i = 0; i < 7; i++)
		{
			if (adc[i] < adc[i+1])
 184:	fc 01       	movw	r30, r24
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	e8 5e       	subi	r30, 0xE8	; 232
 18c:	fe 4f       	sbci	r31, 0xFE	; 254
 18e:	20 81       	ld	r18, Z
 190:	31 81       	ldd	r19, Z+1	; 0x01
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	fc 01       	movw	r30, r24
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	e8 5e       	subi	r30, 0xE8	; 232
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	40 81       	ld	r20, Z
 1a0:	51 81       	ldd	r21, Z+1	; 0x01
 1a2:	24 17       	cp	r18, r20
 1a4:	35 07       	cpc	r19, r21
 1a6:	2c f4       	brge	.+10     	; 0x1b2 <__vector_16+0x9a>
				max = adc[i+1];
 1a8:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <max+0x1>
 1ac:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <max>
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <__vector_16+0xa8>
			else 
				max = adc[i];
 1b2:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <max+0x1>
 1b6:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <max>
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__vector_16+0xa8>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
	while(!(ADCSRA & (1<<ADIF)));
	ADC = adc[8];
	
	if(size == 1)		// 최대, 최소 받기
	{
		for(int i = 0; i < 7; i++)
 1c0:	87 30       	cpi	r24, 0x07	; 7
 1c2:	91 05       	cpc	r25, r1
 1c4:	fc f2       	brlt	.-66     	; 0x184 <__vector_16+0x6c>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	1b c0       	rjmp	.+54     	; 0x202 <__vector_16+0xea>
				max = adc[i];
		}
		
		for(int j = 0; j < 7; j++)
		{
			if (adc[j] > adc[j+1])
 1cc:	fc 01       	movw	r30, r24
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	e8 5e       	subi	r30, 0xE8	; 232
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	20 81       	ld	r18, Z
 1d8:	31 81       	ldd	r19, Z+1	; 0x01
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	fc 01       	movw	r30, r24
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	e8 5e       	subi	r30, 0xE8	; 232
 1e4:	fe 4f       	sbci	r31, 0xFE	; 254
 1e6:	40 81       	ld	r20, Z
 1e8:	51 81       	ldd	r21, Z+1	; 0x01
 1ea:	42 17       	cp	r20, r18
 1ec:	53 07       	cpc	r21, r19
 1ee:	2c f4       	brge	.+10     	; 0x1fa <__vector_16+0xe2>
				min = adc[j+1];
 1f0:	50 93 2b 01 	sts	0x012B, r21	; 0x80012b <min+0x1>
 1f4:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <min>
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <__vector_16+0xea>
			else
				min = adc[j];
 1fa:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <min+0x1>
 1fe:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <min>
				max = adc[i+1];
			else 
				max = adc[i];
		}
		
		for(int j = 0; j < 7; j++)
 202:	87 30       	cpi	r24, 0x07	; 7
 204:	91 05       	cpc	r25, r1
 206:	14 f3       	brlt	.-60     	; 0x1cc <__vector_16+0xb4>
			else
				min = adc[j];
		}
	}
	
	if(mode == 1)		//주행시작
 208:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 20c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	09 f0       	breq	.+2      	; 0x216 <__vector_16+0xfe>
 214:	64 c0       	rjmp	.+200    	; 0x2de <__vector_16+0x1c6>
	{
		double ndata = (adc[8] - min) / (max - min) * 100;
 216:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <max>
 21a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <max+0x1>
 21e:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <min>
 222:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <min+0x1>
 226:	82 1b       	sub	r24, r18
 228:	93 0b       	sbc	r25, r19
 22a:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <max>
 22e:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <max+0x1>
 232:	62 1b       	sub	r22, r18
 234:	73 0b       	sbc	r23, r19
 236:	a7 d1       	rcall	.+846    	; 0x586 <__divmodhi4>
 238:	cb 01       	movw	r24, r22
 23a:	14 e6       	ldi	r17, 0x64	; 100
 23c:	18 9f       	mul	r17, r24
 23e:	b0 01       	movw	r22, r0
 240:	19 9f       	mul	r17, r25
 242:	70 0d       	add	r23, r0
 244:	11 24       	eor	r1, r1
 246:	07 2e       	mov	r0, r23
 248:	00 0c       	add	r0, r0
 24a:	88 0b       	sbc	r24, r24
 24c:	99 0b       	sbc	r25, r25
 24e:	ac d0       	rcall	.+344    	; 0x3a8 <__floatsisf>
 250:	6b 01       	movw	r12, r22
 252:	7c 01       	movw	r14, r24
		cnt++;
 254:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cnt>
 258:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cnt+0x1>
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cnt+0x1>
 262:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <cnt>
		TCNT0 = 100;
 266:	12 bf       	out	0x32, r17	; 50
		int totalweight;
		TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<WGM11);
 268:	82 ea       	ldi	r24, 0xA2	; 162
 26a:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = (1<<WGM13)|(1<<WGM12)|(0<<CS02)|(0<<CS01)|(1<<CS00);
 26c:	89 e1       	ldi	r24, 0x19	; 25
 26e:	8e bd       	out	0x2e, r24	; 46
		ICR1 = 799;
 270:	8f e1       	ldi	r24, 0x1F	; 31
 272:	93 e0       	ldi	r25, 0x03	; 3
 274:	97 bd       	out	0x27, r25	; 39
 276:	86 bd       	out	0x26, r24	; 38
		
		if(cnt == 1)
 278:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cnt>
 27c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cnt+0x1>
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	69 f5       	brne	.+90     	; 0x2de <__vector_16+0x1c6>
		{
			PORTE = 0x0A;
 284:	8a e0       	ldi	r24, 0x0A	; 10
 286:	83 b9       	out	0x03, r24	; 3
			int weight[8] = {-4, -3, -2, -1, 1, 2, 3, 4};
 288:	80 e1       	ldi	r24, 0x10	; 16
 28a:	e0 e0       	ldi	r30, 0x00	; 0
 28c:	f1 e0       	ldi	r31, 0x01	; 1
 28e:	de 01       	movw	r26, r28
 290:	11 96       	adiw	r26, 0x01	; 1
 292:	01 90       	ld	r0, Z+
 294:	0d 92       	st	X+, r0
 296:	8a 95       	dec	r24
 298:	e1 f7       	brne	.-8      	; 0x292 <__vector_16+0x17a>
			if (PORTF = 0b11000000) 
 29a:	80 ec       	ldi	r24, 0xC0	; 192
 29c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
				{totalweight = ndata * (weight[0] + weight[1]);}
 2a0:	69 81       	ldd	r22, Y+1	; 0x01
 2a2:	7a 81       	ldd	r23, Y+2	; 0x02
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	9c 81       	ldd	r25, Y+4	; 0x04
 2a8:	68 0f       	add	r22, r24
 2aa:	79 1f       	adc	r23, r25
 2ac:	07 2e       	mov	r0, r23
 2ae:	00 0c       	add	r0, r0
 2b0:	88 0b       	sbc	r24, r24
 2b2:	99 0b       	sbc	r25, r25
 2b4:	79 d0       	rcall	.+242    	; 0x3a8 <__floatsisf>
 2b6:	a7 01       	movw	r20, r14
 2b8:	96 01       	movw	r18, r12
 2ba:	da d0       	rcall	.+436    	; 0x470 <__mulsf3>
 2bc:	42 d0       	rcall	.+132    	; 0x342 <__fixsfsi>
			else if (PORTF = 0b00000011)
				{totalweight = ndata * (weight[6] + weight[7]);}
			else 
				{OCR1A == 0, OCR1B == 0;}
				
			OCR1A = 159 + totalweight;
 2be:	9b 01       	movw	r18, r22
 2c0:	21 56       	subi	r18, 0x61	; 97
 2c2:	3f 4f       	sbci	r19, 0xFF	; 255
 2c4:	3b bd       	out	0x2b, r19	; 43
 2c6:	2a bd       	out	0x2a, r18	; 42
			OCR1B = 159 - totalweight;
 2c8:	2f e9       	ldi	r18, 0x9F	; 159
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	c9 01       	movw	r24, r18
 2ce:	86 1b       	sub	r24, r22
 2d0:	97 0b       	sbc	r25, r23
 2d2:	99 bd       	out	0x29, r25	; 41
 2d4:	88 bd       	out	0x28, r24	; 40
			cnt = 0;
 2d6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cnt+0x1>
 2da:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <cnt>
		}
	}
}
 2de:	60 96       	adiw	r28, 0x10	; 16
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	1f 91       	pop	r17
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	df 90       	pop	r13
 30e:	cf 90       	pop	r12
 310:	0f 90       	pop	r0
 312:	0b be       	out	0x3b, r0	; 59
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <main>:

int main(void)
{
	DDRB = 0xFF;
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
 322:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0F;
 324:	8f e0       	ldi	r24, 0x0F	; 15
 326:	82 b9       	out	0x02, r24	; 2
	DDRF = 0x00;
 328:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	TCCR0 = (0<<WGM01)|(0<<WGM00)|(0<<COM01)|(0<<COM00)|(1<<CS02)|(1<<CS01)|(1<<CS00);
 32c:	87 e0       	ldi	r24, 0x07	; 7
 32e:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);	
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	87 bf       	out	0x37, r24	; 55
	EIMSK= (1<<INT0)|(1<<INT1);
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	89 bf       	out	0x39, r24	; 57
	EICRA= (1<<ISC11)|(0<<ISC10)|(1<<ISC01)|(0<<ISC00);
 338:	8a e0       	ldi	r24, 0x0A	; 10
 33a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	sei();
 33e:	78 94       	sei
 340:	ff cf       	rjmp	.-2      	; 0x340 <main+0x22>

00000342 <__fixsfsi>:
 342:	04 d0       	rcall	.+8      	; 0x34c <__fixunssfsi>
 344:	68 94       	set
 346:	b1 11       	cpse	r27, r1
 348:	8d c0       	rjmp	.+282    	; 0x464 <__fp_szero>
 34a:	08 95       	ret

0000034c <__fixunssfsi>:
 34c:	70 d0       	rcall	.+224    	; 0x42e <__fp_splitA>
 34e:	88 f0       	brcs	.+34     	; 0x372 <__fixunssfsi+0x26>
 350:	9f 57       	subi	r25, 0x7F	; 127
 352:	90 f0       	brcs	.+36     	; 0x378 <__fixunssfsi+0x2c>
 354:	b9 2f       	mov	r27, r25
 356:	99 27       	eor	r25, r25
 358:	b7 51       	subi	r27, 0x17	; 23
 35a:	a0 f0       	brcs	.+40     	; 0x384 <__fixunssfsi+0x38>
 35c:	d1 f0       	breq	.+52     	; 0x392 <__fixunssfsi+0x46>
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	88 1f       	adc	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	1a f0       	brmi	.+6      	; 0x36e <__fixunssfsi+0x22>
 368:	ba 95       	dec	r27
 36a:	c9 f7       	brne	.-14     	; 0x35e <__fixunssfsi+0x12>
 36c:	12 c0       	rjmp	.+36     	; 0x392 <__fixunssfsi+0x46>
 36e:	b1 30       	cpi	r27, 0x01	; 1
 370:	81 f0       	breq	.+32     	; 0x392 <__fixunssfsi+0x46>
 372:	77 d0       	rcall	.+238    	; 0x462 <__fp_zero>
 374:	b1 e0       	ldi	r27, 0x01	; 1
 376:	08 95       	ret
 378:	74 c0       	rjmp	.+232    	; 0x462 <__fp_zero>
 37a:	67 2f       	mov	r22, r23
 37c:	78 2f       	mov	r23, r24
 37e:	88 27       	eor	r24, r24
 380:	b8 5f       	subi	r27, 0xF8	; 248
 382:	39 f0       	breq	.+14     	; 0x392 <__fixunssfsi+0x46>
 384:	b9 3f       	cpi	r27, 0xF9	; 249
 386:	cc f3       	brlt	.-14     	; 0x37a <__fixunssfsi+0x2e>
 388:	86 95       	lsr	r24
 38a:	77 95       	ror	r23
 38c:	67 95       	ror	r22
 38e:	b3 95       	inc	r27
 390:	d9 f7       	brne	.-10     	; 0x388 <__fixunssfsi+0x3c>
 392:	3e f4       	brtc	.+14     	; 0x3a2 <__fixunssfsi+0x56>
 394:	90 95       	com	r25
 396:	80 95       	com	r24
 398:	70 95       	com	r23
 39a:	61 95       	neg	r22
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	8f 4f       	sbci	r24, 0xFF	; 255
 3a0:	9f 4f       	sbci	r25, 0xFF	; 255
 3a2:	08 95       	ret

000003a4 <__floatunsisf>:
 3a4:	e8 94       	clt
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <__floatsisf+0x12>

000003a8 <__floatsisf>:
 3a8:	97 fb       	bst	r25, 7
 3aa:	3e f4       	brtc	.+14     	; 0x3ba <__floatsisf+0x12>
 3ac:	90 95       	com	r25
 3ae:	80 95       	com	r24
 3b0:	70 95       	com	r23
 3b2:	61 95       	neg	r22
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	8f 4f       	sbci	r24, 0xFF	; 255
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	99 23       	and	r25, r25
 3bc:	a9 f0       	breq	.+42     	; 0x3e8 <__floatsisf+0x40>
 3be:	f9 2f       	mov	r31, r25
 3c0:	96 e9       	ldi	r25, 0x96	; 150
 3c2:	bb 27       	eor	r27, r27
 3c4:	93 95       	inc	r25
 3c6:	f6 95       	lsr	r31
 3c8:	87 95       	ror	r24
 3ca:	77 95       	ror	r23
 3cc:	67 95       	ror	r22
 3ce:	b7 95       	ror	r27
 3d0:	f1 11       	cpse	r31, r1
 3d2:	f8 cf       	rjmp	.-16     	; 0x3c4 <__floatsisf+0x1c>
 3d4:	fa f4       	brpl	.+62     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3d6:	bb 0f       	add	r27, r27
 3d8:	11 f4       	brne	.+4      	; 0x3de <__floatsisf+0x36>
 3da:	60 ff       	sbrs	r22, 0
 3dc:	1b c0       	rjmp	.+54     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3de:	6f 5f       	subi	r22, 0xFF	; 255
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	8f 4f       	sbci	r24, 0xFF	; 255
 3e4:	9f 4f       	sbci	r25, 0xFF	; 255
 3e6:	16 c0       	rjmp	.+44     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e8:	88 23       	and	r24, r24
 3ea:	11 f0       	breq	.+4      	; 0x3f0 <__floatsisf+0x48>
 3ec:	96 e9       	ldi	r25, 0x96	; 150
 3ee:	11 c0       	rjmp	.+34     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f0:	77 23       	and	r23, r23
 3f2:	21 f0       	breq	.+8      	; 0x3fc <__floatsisf+0x54>
 3f4:	9e e8       	ldi	r25, 0x8E	; 142
 3f6:	87 2f       	mov	r24, r23
 3f8:	76 2f       	mov	r23, r22
 3fa:	05 c0       	rjmp	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	66 23       	and	r22, r22
 3fe:	71 f0       	breq	.+28     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 400:	96 e8       	ldi	r25, 0x86	; 134
 402:	86 2f       	mov	r24, r22
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	2a f0       	brmi	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40a:	9a 95       	dec	r25
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	88 1f       	adc	r24, r24
 412:	da f7       	brpl	.-10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 414:	88 0f       	add	r24, r24
 416:	96 95       	lsr	r25
 418:	87 95       	ror	r24
 41a:	97 f9       	bld	r25, 7
 41c:	08 95       	ret

0000041e <__fp_split3>:
 41e:	57 fd       	sbrc	r21, 7
 420:	90 58       	subi	r25, 0x80	; 128
 422:	44 0f       	add	r20, r20
 424:	55 1f       	adc	r21, r21
 426:	59 f0       	breq	.+22     	; 0x43e <__fp_splitA+0x10>
 428:	5f 3f       	cpi	r21, 0xFF	; 255
 42a:	71 f0       	breq	.+28     	; 0x448 <__fp_splitA+0x1a>
 42c:	47 95       	ror	r20

0000042e <__fp_splitA>:
 42e:	88 0f       	add	r24, r24
 430:	97 fb       	bst	r25, 7
 432:	99 1f       	adc	r25, r25
 434:	61 f0       	breq	.+24     	; 0x44e <__fp_splitA+0x20>
 436:	9f 3f       	cpi	r25, 0xFF	; 255
 438:	79 f0       	breq	.+30     	; 0x458 <__fp_splitA+0x2a>
 43a:	87 95       	ror	r24
 43c:	08 95       	ret
 43e:	12 16       	cp	r1, r18
 440:	13 06       	cpc	r1, r19
 442:	14 06       	cpc	r1, r20
 444:	55 1f       	adc	r21, r21
 446:	f2 cf       	rjmp	.-28     	; 0x42c <__fp_split3+0xe>
 448:	46 95       	lsr	r20
 44a:	f1 df       	rcall	.-30     	; 0x42e <__fp_splitA>
 44c:	08 c0       	rjmp	.+16     	; 0x45e <__fp_splitA+0x30>
 44e:	16 16       	cp	r1, r22
 450:	17 06       	cpc	r1, r23
 452:	18 06       	cpc	r1, r24
 454:	99 1f       	adc	r25, r25
 456:	f1 cf       	rjmp	.-30     	; 0x43a <__fp_splitA+0xc>
 458:	86 95       	lsr	r24
 45a:	71 05       	cpc	r23, r1
 45c:	61 05       	cpc	r22, r1
 45e:	08 94       	sec
 460:	08 95       	ret

00000462 <__fp_zero>:
 462:	e8 94       	clt

00000464 <__fp_szero>:
 464:	bb 27       	eor	r27, r27
 466:	66 27       	eor	r22, r22
 468:	77 27       	eor	r23, r23
 46a:	cb 01       	movw	r24, r22
 46c:	97 f9       	bld	r25, 7
 46e:	08 95       	ret

00000470 <__mulsf3>:
 470:	0b d0       	rcall	.+22     	; 0x488 <__mulsf3x>
 472:	78 c0       	rjmp	.+240    	; 0x564 <__fp_round>
 474:	69 d0       	rcall	.+210    	; 0x548 <__fp_pscA>
 476:	28 f0       	brcs	.+10     	; 0x482 <__mulsf3+0x12>
 478:	6e d0       	rcall	.+220    	; 0x556 <__fp_pscB>
 47a:	18 f0       	brcs	.+6      	; 0x482 <__mulsf3+0x12>
 47c:	95 23       	and	r25, r21
 47e:	09 f0       	breq	.+2      	; 0x482 <__mulsf3+0x12>
 480:	5a c0       	rjmp	.+180    	; 0x536 <__fp_inf>
 482:	5f c0       	rjmp	.+190    	; 0x542 <__fp_nan>
 484:	11 24       	eor	r1, r1
 486:	ee cf       	rjmp	.-36     	; 0x464 <__fp_szero>

00000488 <__mulsf3x>:
 488:	ca df       	rcall	.-108    	; 0x41e <__fp_split3>
 48a:	a0 f3       	brcs	.-24     	; 0x474 <__mulsf3+0x4>

0000048c <__mulsf3_pse>:
 48c:	95 9f       	mul	r25, r21
 48e:	d1 f3       	breq	.-12     	; 0x484 <__mulsf3+0x14>
 490:	95 0f       	add	r25, r21
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	55 1f       	adc	r21, r21
 496:	62 9f       	mul	r22, r18
 498:	f0 01       	movw	r30, r0
 49a:	72 9f       	mul	r23, r18
 49c:	bb 27       	eor	r27, r27
 49e:	f0 0d       	add	r31, r0
 4a0:	b1 1d       	adc	r27, r1
 4a2:	63 9f       	mul	r22, r19
 4a4:	aa 27       	eor	r26, r26
 4a6:	f0 0d       	add	r31, r0
 4a8:	b1 1d       	adc	r27, r1
 4aa:	aa 1f       	adc	r26, r26
 4ac:	64 9f       	mul	r22, r20
 4ae:	66 27       	eor	r22, r22
 4b0:	b0 0d       	add	r27, r0
 4b2:	a1 1d       	adc	r26, r1
 4b4:	66 1f       	adc	r22, r22
 4b6:	82 9f       	mul	r24, r18
 4b8:	22 27       	eor	r18, r18
 4ba:	b0 0d       	add	r27, r0
 4bc:	a1 1d       	adc	r26, r1
 4be:	62 1f       	adc	r22, r18
 4c0:	73 9f       	mul	r23, r19
 4c2:	b0 0d       	add	r27, r0
 4c4:	a1 1d       	adc	r26, r1
 4c6:	62 1f       	adc	r22, r18
 4c8:	83 9f       	mul	r24, r19
 4ca:	a0 0d       	add	r26, r0
 4cc:	61 1d       	adc	r22, r1
 4ce:	22 1f       	adc	r18, r18
 4d0:	74 9f       	mul	r23, r20
 4d2:	33 27       	eor	r19, r19
 4d4:	a0 0d       	add	r26, r0
 4d6:	61 1d       	adc	r22, r1
 4d8:	23 1f       	adc	r18, r19
 4da:	84 9f       	mul	r24, r20
 4dc:	60 0d       	add	r22, r0
 4de:	21 1d       	adc	r18, r1
 4e0:	82 2f       	mov	r24, r18
 4e2:	76 2f       	mov	r23, r22
 4e4:	6a 2f       	mov	r22, r26
 4e6:	11 24       	eor	r1, r1
 4e8:	9f 57       	subi	r25, 0x7F	; 127
 4ea:	50 40       	sbci	r21, 0x00	; 0
 4ec:	8a f0       	brmi	.+34     	; 0x510 <__mulsf3_pse+0x84>
 4ee:	e1 f0       	breq	.+56     	; 0x528 <__mulsf3_pse+0x9c>
 4f0:	88 23       	and	r24, r24
 4f2:	4a f0       	brmi	.+18     	; 0x506 <__mulsf3_pse+0x7a>
 4f4:	ee 0f       	add	r30, r30
 4f6:	ff 1f       	adc	r31, r31
 4f8:	bb 1f       	adc	r27, r27
 4fa:	66 1f       	adc	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	91 50       	subi	r25, 0x01	; 1
 502:	50 40       	sbci	r21, 0x00	; 0
 504:	a9 f7       	brne	.-22     	; 0x4f0 <__mulsf3_pse+0x64>
 506:	9e 3f       	cpi	r25, 0xFE	; 254
 508:	51 05       	cpc	r21, r1
 50a:	70 f0       	brcs	.+28     	; 0x528 <__mulsf3_pse+0x9c>
 50c:	14 c0       	rjmp	.+40     	; 0x536 <__fp_inf>
 50e:	aa cf       	rjmp	.-172    	; 0x464 <__fp_szero>
 510:	5f 3f       	cpi	r21, 0xFF	; 255
 512:	ec f3       	brlt	.-6      	; 0x50e <__mulsf3_pse+0x82>
 514:	98 3e       	cpi	r25, 0xE8	; 232
 516:	dc f3       	brlt	.-10     	; 0x50e <__mulsf3_pse+0x82>
 518:	86 95       	lsr	r24
 51a:	77 95       	ror	r23
 51c:	67 95       	ror	r22
 51e:	b7 95       	ror	r27
 520:	f7 95       	ror	r31
 522:	e7 95       	ror	r30
 524:	9f 5f       	subi	r25, 0xFF	; 255
 526:	c1 f7       	brne	.-16     	; 0x518 <__mulsf3_pse+0x8c>
 528:	fe 2b       	or	r31, r30
 52a:	88 0f       	add	r24, r24
 52c:	91 1d       	adc	r25, r1
 52e:	96 95       	lsr	r25
 530:	87 95       	ror	r24
 532:	97 f9       	bld	r25, 7
 534:	08 95       	ret

00000536 <__fp_inf>:
 536:	97 f9       	bld	r25, 7
 538:	9f 67       	ori	r25, 0x7F	; 127
 53a:	80 e8       	ldi	r24, 0x80	; 128
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	08 95       	ret

00000542 <__fp_nan>:
 542:	9f ef       	ldi	r25, 0xFF	; 255
 544:	80 ec       	ldi	r24, 0xC0	; 192
 546:	08 95       	ret

00000548 <__fp_pscA>:
 548:	00 24       	eor	r0, r0
 54a:	0a 94       	dec	r0
 54c:	16 16       	cp	r1, r22
 54e:	17 06       	cpc	r1, r23
 550:	18 06       	cpc	r1, r24
 552:	09 06       	cpc	r0, r25
 554:	08 95       	ret

00000556 <__fp_pscB>:
 556:	00 24       	eor	r0, r0
 558:	0a 94       	dec	r0
 55a:	12 16       	cp	r1, r18
 55c:	13 06       	cpc	r1, r19
 55e:	14 06       	cpc	r1, r20
 560:	05 06       	cpc	r0, r21
 562:	08 95       	ret

00000564 <__fp_round>:
 564:	09 2e       	mov	r0, r25
 566:	03 94       	inc	r0
 568:	00 0c       	add	r0, r0
 56a:	11 f4       	brne	.+4      	; 0x570 <__fp_round+0xc>
 56c:	88 23       	and	r24, r24
 56e:	52 f0       	brmi	.+20     	; 0x584 <__fp_round+0x20>
 570:	bb 0f       	add	r27, r27
 572:	40 f4       	brcc	.+16     	; 0x584 <__fp_round+0x20>
 574:	bf 2b       	or	r27, r31
 576:	11 f4       	brne	.+4      	; 0x57c <__fp_round+0x18>
 578:	60 ff       	sbrs	r22, 0
 57a:	04 c0       	rjmp	.+8      	; 0x584 <__fp_round+0x20>
 57c:	6f 5f       	subi	r22, 0xFF	; 255
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	08 95       	ret

00000586 <__divmodhi4>:
 586:	97 fb       	bst	r25, 7
 588:	07 2e       	mov	r0, r23
 58a:	16 f4       	brtc	.+4      	; 0x590 <__divmodhi4+0xa>
 58c:	00 94       	com	r0
 58e:	06 d0       	rcall	.+12     	; 0x59c <__divmodhi4_neg1>
 590:	77 fd       	sbrc	r23, 7
 592:	08 d0       	rcall	.+16     	; 0x5a4 <__divmodhi4_neg2>
 594:	0b d0       	rcall	.+22     	; 0x5ac <__udivmodhi4>
 596:	07 fc       	sbrc	r0, 7
 598:	05 d0       	rcall	.+10     	; 0x5a4 <__divmodhi4_neg2>
 59a:	3e f4       	brtc	.+14     	; 0x5aa <__divmodhi4_exit>

0000059c <__divmodhi4_neg1>:
 59c:	90 95       	com	r25
 59e:	81 95       	neg	r24
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	08 95       	ret

000005a4 <__divmodhi4_neg2>:
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255

000005aa <__divmodhi4_exit>:
 5aa:	08 95       	ret

000005ac <__udivmodhi4>:
 5ac:	aa 1b       	sub	r26, r26
 5ae:	bb 1b       	sub	r27, r27
 5b0:	51 e1       	ldi	r21, 0x11	; 17
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <__udivmodhi4_ep>

000005b4 <__udivmodhi4_loop>:
 5b4:	aa 1f       	adc	r26, r26
 5b6:	bb 1f       	adc	r27, r27
 5b8:	a6 17       	cp	r26, r22
 5ba:	b7 07       	cpc	r27, r23
 5bc:	10 f0       	brcs	.+4      	; 0x5c2 <__udivmodhi4_ep>
 5be:	a6 1b       	sub	r26, r22
 5c0:	b7 0b       	sbc	r27, r23

000005c2 <__udivmodhi4_ep>:
 5c2:	88 1f       	adc	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	5a 95       	dec	r21
 5c8:	a9 f7       	brne	.-22     	; 0x5b4 <__udivmodhi4_loop>
 5ca:	80 95       	com	r24
 5cc:	90 95       	com	r25
 5ce:	bc 01       	movw	r22, r24
 5d0:	cd 01       	movw	r24, r26
 5d2:	08 95       	ret

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
